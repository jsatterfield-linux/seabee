searchState.loadedDescShard("tests", 0, "Convenience macro for creating a libtest_mimic::Trial with …\nStructure which holds all of the information necessary to …\nBuilder for <code>TestCommand</code>.\nError type for TestCommandBuilder\nUninitialized field\nCustom validation error\nOptional: The arguments to pass to the binary\nBuilds a new <code>TestCommand</code>.\nOptional: The expected return code\nOptional: Expected string to find in stderr\nOptional: Expected string to find in stdout\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe binary to run in a forked process\nConvenience method to run TestCommand::test_result but …\nRuns the command as configured and returns the output …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSummarized BPF userspace, map, and pin state\nSummarized information about a BPF map\nSummarized pin information\nBPF map type, see libbpf_rs::MapType\nsize in bytes of a key\nbyte-vector copy of key/value paired data in the BPF map\npin directory on the BPF filesystem\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBPF map id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nstatic dump of eBPF map information\nprocess id of the SeaBee userspace\npin paths on the BPF filesystem\nstatic dump of eBPF pin information\nCreates a BPFState object from the perspective of a …\nCreates a BPFState object from the perspective of the BPF …\nGeneric integration testing harness with default …\nAggregated state after the Rust userspace is loaded from …\nChecks whether the runtime state gathered from the Rust …\nProvides a reference to a static Self::CustomTestState …\nReturns the argument unchanged.\nProvides individual tests an easy way to grab the static …\nProvides individual tests an easy way to grab the static …\nState gathered from static file that is always true\nCalls <code>U::from(self)</code>.\nState gathered at runtime from Linux (bash, bpftool, etc.)\nRecords the SeaBee state from the Linux and Rust …\nDefault test harness lifecycle implementation\nState gathered at runtime from the Rust program\nProvides a reference to a static TestSystemState needed by …\nProvides an iterator of tests to pass to the test harness …")